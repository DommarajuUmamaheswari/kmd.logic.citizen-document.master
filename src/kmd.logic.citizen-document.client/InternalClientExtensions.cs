// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace kmd.logic.citizen_document.client
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InternalClient.
    /// </summary>
    internal static partial class InternalClientExtensions
    {
            /// <summary>
            /// Uploads the single citizen document
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='cpr'>
            /// </param>
            /// <param name='retentionPeriodInDays'>
            /// </param>
            /// <param name='documentType'>
            /// Possible values include: 'citizenDocument', 'digitalPostCoverLetter',
            /// 'snailMailCoverLetter'
            /// </param>
            /// <param name='document'>
            /// </param>
            public static object UploadAttachment(this IInternalClient operations, System.Guid subscriptionId, string configurationId = default(string), string cpr = default(string), int? retentionPeriodInDays = default(int?), string documentType = default(string), Stream document = default(Stream))
            {
                return operations.UploadAttachmentAsync(subscriptionId, configurationId, cpr, retentionPeriodInDays, documentType, document).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads the single citizen document
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='cpr'>
            /// </param>
            /// <param name='retentionPeriodInDays'>
            /// </param>
            /// <param name='documentType'>
            /// Possible values include: 'citizenDocument', 'digitalPostCoverLetter',
            /// 'snailMailCoverLetter'
            /// </param>
            /// <param name='document'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UploadAttachmentAsync(this IInternalClient operations, System.Guid subscriptionId, string configurationId = default(string), string cpr = default(string), int? retentionPeriodInDays = default(int?), string documentType = default(string), Stream document = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadAttachmentWithHttpMessagesAsync(subscriptionId, configurationId, cpr, retentionPeriodInDays, documentType, document, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends the documents to citizens
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='sendCitizenDocumentRequest'>
            /// </param>
            public static SendCitizenDocumentResponse SendDocument(this IInternalClient operations, System.Guid subscriptionId, SendCitizenDocumentRequest sendCitizenDocumentRequest)
            {
                return operations.SendDocumentAsync(subscriptionId, sendCitizenDocumentRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends the documents to citizens
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='sendCitizenDocumentRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SendCitizenDocumentResponse> SendDocumentAsync(this IInternalClient operations, System.Guid subscriptionId, SendCitizenDocumentRequest sendCitizenDocumentRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendDocumentWithHttpMessagesAsync(subscriptionId, sendCitizenDocumentRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
